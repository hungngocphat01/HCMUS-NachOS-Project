// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"
#include "syscall_utils.h"
#define MAX_SIZE 100

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------

// Ham xy ly syscall Sub
void syscallSub() {
    int a = machine->ReadRegister(4);
    int b = machine->ReadRegister(5);
    int result = a - b;
    machine->WriteRegister(2, result);

    printf("Service called. %d - %d is %d\n", a, b, result);
}

// Ham xy ly syscall ReadChar
void syscallReadChar() {
    char c;
    // Doc 1 byte tu console
    int numBytesRead = synchconsole->Read(&c, 1);
    // synchconsole tra ve -1 => nguoi dung endstream
    if (numBytesRead < 0) {
        printf("\nRead cancelled.\n");
    }

    machine->WriteRegister(2, c);
}

// Ham xy ly syscall PrintChar
void syscallPrintChar() {
    // Doc tham so 1
    int arg = machine->ReadRegister(4);
    // Kiem tra tinh hop le cua ky tu
    if (arg < 0 || arg > 255) {
        printf("\nInvalid character!!! ASCII code: %d\n", arg);
        return;
    }

    char c = (char)arg;
    // Ghi 1 byte ra console
    synchconsole->Write(&c, 1);    
}

// Ham xu ly syscall ReadInt
void syscallReadInt() {
    // Tao mang rong co MAX_SIZE phan tu \0
    char* buffer = new char[MAX_SIZE];
    // Kich thuoc thuc su da doc
    int numBytesRead = synchconsole->Read(buffer, MAX_SIZE);
    // printf("\nBuffer read: %s\n", buffer);
    // printf("\nBytes read: %d\n", numBytesRead);

    // synchconsole tra ve -1 => nguoi dung end stream
    if (numBytesRead == -1) {
        printf("\nRead cancelled.\n");
        return;
    }

    bool isNegative = false;

    // Kiem tra so am
    if (buffer[0] == '-') {
        isNegative = true;
        // Bo ki tu dau tien di 
        numBytesRead--;
        buffer++;
    }

    int result = 0;
    // Thuat toan doi chuoi sang so nguyen
    // numBytesRead chinh la so chu so cua so vua nhap
    for (int i = 0; i < numBytesRead; i++) {
        // Kiem tra tinh hop le cua ki tu
        if (buffer[i] < '0' || buffer[i] > '9') {
            printf("\nInvalid digit: %c\n", buffer[i]);

            // Restore buffer
            if (isNegative) {
                buffer--;
            }
            delete[] buffer;
            return;
        }

        int k = buffer[i] - '0';
        result += k * pow(10, numBytesRead - i - 1);
    }
    if (isNegative) {
        result *= -1;
        buffer--;
    }

    // Tra ket qua ve
    machine->WriteRegister(2, result);

    delete[] buffer;
}

// Input: Khong gian dia chi User(int) - gioi han cua buffer(int)
// Output: Bo nho dem Buffer(char*)
// Chuc nang: Sao chep vung nho User sang vung nho System
char* User2System(int Addr, int limit)
{
	int i; //chi so index
	int oneChar;
	char* kernelBuf = NULL;
	kernelBuf = new char[limit + 1]; //can cho chuoi terminal
	if (kernelBuf == NULL)
		return kernelBuf;
		
	memset(kernelBuf, 0, limit + 1);
	
	for (i = 0; i < limit; i++)
	{
		machine->ReadMem(Addr + i, 1, &oneChar);
		kernelBuf[i] = (char)oneChar;
		if (oneChar == 0)
			break;
	}
	return kernelBuf;
}

// Doi thanh ghi Program counter cua he thong ve sau 4 byte de tiep tuc nap lenh
void IncreasePC()
{
	int counter = machine->ReadRegister(PCReg);
   	machine->WriteRegister(PrevPCReg, counter);
    	counter = machine->ReadRegister(NextPCReg);
    	machine->WriteRegister(PCReg, counter);
   	machine->WriteRegister(NextPCReg, counter + 4);
}

// Input: Khong gian vung nho User(int) - gioi han cua buffer(int) - bo nho dem buffer(char*)
// Output: So byte da sao chep(int)
// Chuc nang: Sao chep vung nho System sang vung nho User
int System2User(int Addr, int len, char* buffer)
{
	if (len < 0) return -1;
	if (len == 0)return len;
	int i = 0;
	int oneChar = 0;
	do{
		oneChar = (int)buffer[i];
		machine->WriteMem(Addr + i, 1, oneChar);
		i++;
	} while (i < len && oneChar != 0);
	return i;
}


void syscallReadString(){
    
    int Addr;
    int length;
	char* buffer;
	Addr = machine->ReadRegister(4); // Lay dia chi tham so buffer truyen vao tu thanh ghi so 4
	length = machine->ReadRegister(5); // Lay do dai toi da cua chuoi nhap vao tu thanh ghi so 5
	buffer = User2System(Addr, length); // Copy chuoi tu vung nho User Space sang System Space
	gSynchConsole->Read(buffer, length); // Goi ham Read cua SynchConsole de doc chuoi
	System2User(Addr, length, buffer); // Copy chuoi tu vung nho System Space sang vung nho User Space
	delete buffer; 
	IncreasePC(); // Tang Program Counter 
	return;
}

void syscallPrintString(){
    // Input: Buffer(char*)
	// Output: Chuoi doc duoc tu buffer(char*)
	// Cong dung: Xuat mot chuoi la tham so buffer truyen vao ra man hinh
	int Addr;
	char* buffer;
	Addr = machine->ReadRegister(4); // Lay dia chi cua tham so buffer tu thanh ghi so 4
	buffer = User2System(Addr, 255); // Copy chuoi tu vung nho User Space sang System Space voi bo dem buffer dai 255 ki tu
	int length = 0;
	while (buffer[length] != 0) length++; // Dem do dai that cua chuoi
	gSynchConsole->Write(buffer, length + 1); // Goi ham Write cua SynchConsole de in chuoi
	delete buffer; 
	    //IncreasePC(); // Tang Program Counter 
}
    

void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
	
	switch(which){
		case NoException:
			return;
		
		case PageFaultException:
			DEBUG('a', "\nNo valid translation found.\n");
			printf("\nNo valid translation found.\n");
			interrupt->Halt();
		break;

		case ReadOnlyException:
			DEBUG('a', "\nWrite attempted to page marked read-only.\n");
			printf("\nWrite attempted to page marked read-only.\n");
			interrupt->Halt();
			break;

		case BusErrorException:
			DEBUG('a', "\nTranslation resulted invalid physical address.\n");
			printf("\nTranslation resulted invalid physical address.\n");
			interrupt->Halt();
			break;

		case AddressErrorException:
			DEBUG('a', "\nUnaligned reference or one that was beyond the end of the address space.\n");
			printf("\nUnaligned reference or one that was beyond the end of the address space.\n");
			interrupt->Halt();
			break;

		case OverflowException:
			DEBUG('a', "\nInteger overflow in add or sub.\n");
			printf("\nInteger overflow in add or sub.\n");
			interrupt->Halt();
			break;

		case IllegalInstrException:
			DEBUG('a', "\nUnimplemented or reserved instr.\n");
			printf("\nUnimplemented or reserved instr.\n");
			interrupt->Halt();
			break;

		case NumExceptionTypes:
			DEBUG('a', "\nNumber exception types.\n");
			printf("\nNumber exception types.\n");
			interrupt->Halt();
			break;
			
		case SyscallException:
			switch (type) {
				// Khi nguoi dung goi syscall halt
				case SC_Halt:
					DEBUG('a', "Shutdown, initiated by user program.\n");
					interrupt->Halt();
					break; 
				// Tru 2 so 
				case SC_Sub:
					syscallSub();
					break;

				case SC_ReadChar:
					syscallReadChar();
					break;

				case SC_PrintChar:
					syscallPrintChar();
					break;

				case SC_ReadInt:
					syscallReadInt();
					break;

                case SC_ReadString:
                    syscallReadString();
                    break;	
                case SC_PrintString:
                    syscallPrintString();    
				default:
					break;
			}		

			fetchNextInstruction();
	}
}
